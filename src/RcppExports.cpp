// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// difference
NumericVector difference(double x, NumericVector y);
RcppExport SEXP _satellite_difference(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(difference(x, y));
    return rcpp_result_gen;
END_RCPP
}
// isNA
LogicalVector isNA(NumericVector x);
RcppExport SEXP _satellite_isNA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(isNA(x));
    return rcpp_result_gen;
END_RCPP
}
// naOmit
NumericVector naOmit(NumericVector x);
RcppExport SEXP _satellite_naOmit(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(naOmit(x));
    return rcpp_result_gen;
END_RCPP
}
// whichMin
int whichMin(NumericVector x);
RcppExport SEXP _satellite_whichMin(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(whichMin(x));
    return rcpp_result_gen;
END_RCPP
}
// barometricFormula
double barometricFormula(double z, NumericVector gp, NumericVector ta, IntegerVector p);
RcppExport SEXP _satellite_barometricFormula(SEXP zSEXP, SEXP gpSEXP, SEXP taSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gp(gpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ta(taSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(barometricFormula(z, gp, ta, p));
    return rcpp_result_gen;
END_RCPP
}
// run_barometricFormula
NumericVector run_barometricFormula(NumericMatrix a, NumericMatrix b, NumericVector dem, IntegerVector p);
RcppExport SEXP _satellite_run_barometricFormula(SEXP aSEXP, SEXP bSEXP, SEXP demSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dem(demSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(run_barometricFormula(a, b, dem, p));
    return rcpp_result_gen;
END_RCPP
}
// insertMinReqRem
NumericMatrix insertMinReqRem(IntegerVector anHs, IntegerVector anHt);
RcppExport SEXP _satellite_insertMinReqRem(SEXP anHsSEXP, SEXP anHtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type anHs(anHsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type anHt(anHtSEXP);
    rcpp_result_gen = Rcpp::wrap(insertMinReqRem(anHs, anHt));
    return rcpp_result_gen;
END_RCPP
}
// seqC
Rcpp::NumericVector seqC(double from_, double to_, double by_);
RcppExport SEXP _satellite_seqC(SEXP from_SEXP, SEXP to_SEXP, SEXP by_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type from_(from_SEXP);
    Rcpp::traits::input_parameter< double >::type to_(to_SEXP);
    Rcpp::traits::input_parameter< double >::type by_(by_SEXP);
    rcpp_result_gen = Rcpp::wrap(seqC(from_, to_, by_));
    return rcpp_result_gen;
END_RCPP
}
// ScatteringModel
NumericVector ScatteringModel(NumericMatrix mnBandWls, double dScatCoef);
RcppExport SEXP _satellite_ScatteringModel(SEXP mnBandWlsSEXP, SEXP dScatCoefSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mnBandWls(mnBandWlsSEXP);
    Rcpp::traits::input_parameter< double >::type dScatCoef(dScatCoefSEXP);
    rcpp_result_gen = Rcpp::wrap(ScatteringModel(mnBandWls, dScatCoef));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_satellite_difference", (DL_FUNC) &_satellite_difference, 2},
    {"_satellite_isNA", (DL_FUNC) &_satellite_isNA, 1},
    {"_satellite_naOmit", (DL_FUNC) &_satellite_naOmit, 1},
    {"_satellite_whichMin", (DL_FUNC) &_satellite_whichMin, 1},
    {"_satellite_barometricFormula", (DL_FUNC) &_satellite_barometricFormula, 4},
    {"_satellite_run_barometricFormula", (DL_FUNC) &_satellite_run_barometricFormula, 4},
    {"_satellite_insertMinReqRem", (DL_FUNC) &_satellite_insertMinReqRem, 2},
    {"_satellite_seqC", (DL_FUNC) &_satellite_seqC, 3},
    {"_satellite_ScatteringModel", (DL_FUNC) &_satellite_ScatteringModel, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_satellite(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
